U,Licor LI840A
I,Cell temperature (degC),0,input,numeric
// <LI840><DATA><CELLTEMP>{float}
// degrees Celcius








ENDIO

I,Cell pressure (kPa),1,input,numeric
// <LI840><DATA><CELLPRES>{float}
// kilopascals








ENDIO

I,CO2 mixing ratio (ppm),2,input,numeric
// <LI840><DATA><CO2>{float}
// parts per million








ENDIO

I,CO2 absorption (arb),3,input,numeric
// <LI840><DATA><CO2ABS>{float}
// *not specified*








ENDIO

I,H2O mixing ratio (ppt),4,input,numeric
// <LI840><DATA><H2O>{float}
// parts per thousand (mmol/mol)








ENDIO

I,H2O absorption (arb),5,input,numeric
// <LI840><DATA><H2OABS>{float}
// *not specified*








ENDIO

I,H2O dew point (degC),6,input,numeric
// <LI840><DATA><H2ODEWPOINT>{float}
// degrees Celcius








ENDIO

I,Input voltage (Vdc),7,input,numeric
// <LI840><DATA><IVOLT>{float}
// volts








ENDIO

I,Raw CO2,8,input,numeric
// <LI840><RAW><DATA><CO2>{integer}
// *not specified*








ENDIO

I,Raw CO2 reference,9,input,numeric
// <LI840><RAW><DATA><CO2REF>{integer}
// *not specified*








ENDIO

I,Raw H2O,10,input,numeric
// <LI840><RAW><DATA><H2O>{integer}
// *not specified*








ENDIO

I,Raw H2O reference,11,input,numeric
// <LI840><RAW><DATA><H2OREF>{integer}
// *not specified*








ENDIO

I,Status,12,input,string
// device-specific status update stream










ENDIO

F,reset,0

local isListening = 1      //
local inPollMode = 0       // default (false): unpolled mode







ENDIO

F,Poll,1
function Poll(string out, until)
// this function will poll the port with given string and read
// the response until the given character.  Returns NULL (empty)
// if there is an error

if (argc < 2)
   throw("Invalid number of parameters")
endif
private string in
try
   // lock the port
   if (!LockPort())
      throw("Unable to lock port")
   endif
   // clear anything pending
   Purge()
   // output our string
   Write(out)
   // and read until the eol:
   in = ReadUntil(until) 
   // release the port
   UnlockPort()
   // and return the response
   return(in)
catch()
   // error occured
   UnlockPort()
   throw()
endcatch
// return NULL to indicate error.  This should never happen
// because of the throw() statement above
return(NULL)









ENDIO

F,print,1
// output to device's status channel

Function print(string inStr)
   private string out = FormatDateTime("%Y-%m-%d %H:%M:%S",SysTime())+" "+strDevice+": "+inStr
   Local.Channel.AddValue(strDevice,0,"Status",0,out)









ENDIO

F,parseData,1

Function parseData(string data, stamp)
   
   Local.Channel.AddValue(










ENDIO

F,Listen,0


   isListening = !isListening
   print("Streaming mode toggled")
   
   //if (isListening)
   //   print("Listening for unpolled data")
   //else
   //   print("Not listening for unpolled data")
   //endif









ENDIO

E,OnLoad

print("Initalizing...")
reset()

local isStreaming = 0
local myvar





ENDIO

E,OnUnload









ENDIO

E,OnReceive
// upon receiving character into buffer

if (strIn == Chr(10))       // check for line feed, 0x10
   private stamp = 0        // create timestamp
   if (1)//isStreaming)
   //if (isListening)         // if not ignoring incoming data
      private string data = ReadUntil(Chr(10)) // read it
      //parseData(data, stamp)                   // and parse
      //? "foo"
   endif
endif









ENDIO

E,OnSend
// <LI840><DATA><CELLTEMP>{float}
// degrees Celcius








ENDIO

